https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html
http://gitref.org/basic/


- Only use <git push> and <git pull> to synchronise with repo [Sync in GUI]

- If you just want to go back and forth the history, do it using <git checkout>

- See the revision id using <git history>

- To get back to latest revision, use <git checkout master>

- Before doing any command, always make yourself do <git status>. make sure that git status result is contain text working directory clean.

- If you need to revert a file to it's previous revision, you can do it with <git merge>. Before doing it to a file, test it first with <git diff>. 
Ex: git diff rev1:rev2 filename



REVERT:
================================
https://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit


#revert back to sprecific commit:
git revert --no-commit 0766c053..HEAD


#temporarily switch to specific commit:
git checkout 0d1d7fc32

#or to make a new branch 
git checkout -b old-state 0d1d7fc32


# This will create three separate revert commits:
git revert a867b4af 25eee4ca 0766c053

# It also takes ranges. This will revert the last two commits:
git revert HEAD~2..HEAD

#Similarly, you can revert a range of commits using commit hashes:
git revert a867b4af..0766c053 

# Reverting a merge commit
git revert -m 1 <merge_commit_sha>

# To get just one, you could use `rebase -i` to squash them afterwards
# Or, you could do it manually (be sure to do this at top level of the repo)
# get your index and work tree into the desired state, without changing HEAD:
git checkout 0d1d7fc32 .

# Then commit. Be sure and write a good message describing what you just did
git commit







